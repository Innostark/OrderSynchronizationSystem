<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="source_sql_PullOrderItems" xml:space="preserve">
    <value>Select oi.ItemCode As SKU,
       oi.ItemDescription As 'Description',
	   Cast(oi.Quantity As int) As Quantity,
	   oi.CustomValue1 As Custom1,
	   oi.CustomValue2 As Custom2,
	   oi.CustomValue3 As Custom3,
	   oi.CustomValue4 As Custom4,
	   oi.CustomValue5 As Custom5,
	   '' As Custom6
From   OrderItems as oi With(NoLock)
Where  oi.OrderId = @THubOrderId</value>
  </data>
  <data name="source_sql_PullOrdersFromThub" xml:space="preserve">
    <value>Select  Top 1 ord.OrderId As THubOrderID,
       ord.ChannelOrderReference As OrderID, 
       ord.OrderDate As Orderdate, 
       Case ord.ShippingAddrSameAsBilling
	    When 0
		 Then ord.SAddr_Company
		When 1
		 Then ord.BAddr_Company
	   End As Company,
       ord.SAddr_FirstName As FirstName,
       ord.SAddr_LastName As LastName,
       Case ord.ShippingAddrSameAsBilling
	    When 0
	     Then ord.SAddr_Line1
		When 1
		 Then ord.BAddr_Line1
	   End As Address1,
       Case ord.ShippingAddrSameAsBilling
	    When 0
	     Then ord.SAddr_Line2
		When 1
		 Then ord.BAddr_Line2
	   End As Address2,
       Case ord.ShippingAddrSameAsBilling
	    When 0
	     Then ord.SAddr_City
		When 1
		 Then ord.BAddr_City
	   End As City,
       Case ord.ShippingAddrSameAsBilling
	    When 0
	     Then ord.SAddr_State
		When 1
		 Then ord.BAddr_State
	   End As 'State',
       Case ord.ShippingAddrSameAsBilling
	    When 0
	     Then ord.SAddr_Zip
		When 1
		 Then ord.BAddr_Zip
	   End As Zip,
       Case ord.ShippingAddrSameAsBilling
	    When 0
	     Then ord.SAddr_Country
		When 1
		 Then ord.BAddr_Country
	   End As Country,
       Case ord.ShippingAddrSameAsBilling
	    When 0
	     Then ord.SAddr_Email1
		 When 1
		 Then ord.BAddr_Email1
	   End As Email,
       Case ord.ShippingAddrSameAsBilling
	    When 0
	     Then ord.SAddr_Phone1
		 When 1
		 Then ord.BAddr_Phone1
	   End As Phone,
       WebShipMethod,
       0.00 As CODAmount,
       ord.CustomValue1 As Custom1,
       ord.CustomValue2 As Custom2,
       ord.CustomValue3 As Custom3,
       ord.CustomValue4 As Custom4,
       ord.CustomValue5 As Custom5,
       '' As Custom6,
	   ord.IsCompleteOrderFlag,
	   Case ord.ShippingStatusId
	    When 3
		 Then 'SHIPPED'
		When 5
		 Then 'PUBLISHED'
		When 6
		 Then 'SKIP'
	   End as [Status]
    From   Orders As ord With(NoLock),
           OrderShippingStatus As oss With(NoLock)
    Where  ord.ChannelOrderReference = 100004947</value>
  </data>
  <data name="source_sql_verify" xml:space="preserve">
    <value>Select count(*) from Orders With(NoLock)</value>
  </data>
  <data name="staging_sql_CreateOssOrders" xml:space="preserve">
    <value>USPCreateOSSOrders</value>
  </data>
  <data name="staging_sql_LastExecutedTHubOrderId" xml:space="preserve">
    <value>Select Cast(oc.ConfigValue As bigint) As LastExecutedTHubOrderId From OSSConfigurations As oc Where oc.ConfigKey = 'LastUpdatedTHubOrderId'</value>
  </data>
  <data name="staging_sql_verify" xml:space="preserve">
    <value>Select count(*) from OSSOrders With(NoLock)</value>
  </data>
  <data name="staging_get_Shipment_Mapping_ThubToMoldingBox" xml:space="preserve">
    <value>Select DestinationShipmentMethod from OSSShipmentMappings where SourceShipmentMethod = @SourceShipment and THubToMBMap = @THubToMbFlag</value>
  </data>
</root>